// Script de depura√ß√£o para testar sincroniza√ß√£o de dados
// Execute este script no console do navegador para diagnosticar problemas

function debugSyncSetup() {
    console.log('üîç === DIAGN√ìSTICO DE SINCRONIZA√á√ÉO DE DADOS ===');
    
    // Verificar componentes b√°sicos
    console.log('\nüì¶ 1. COMPONENTES DISPON√çVEIS:');
    console.log('  - window.sb (Supabase):', !!window.sb);
    console.log('  - window.SupabaseMultiplayer:', !!window.SupabaseMultiplayer);
    console.log('  - window.Realtime:', !!window.Realtime);
    console.log('  - window.s_oGame:', !!window.s_oGame);
    
    // Verificar m√©todos do jogo
    if (window.s_oGame) {
        console.log('\nüéÆ 2. M√âTODOS DO JOGO:');
        const gameMethods = Object.keys(window.s_oGame);
        console.log('  - onSynchronizedRoll:', gameMethods.includes('onSynchronizedRoll'));
        console.log('  - onServerRoll:', gameMethods.includes('onServerRoll'));
        console.log('  - _generateRandomDices:', gameMethods.includes('_generateRandomDices'));
        console.log('  - _startRollingAnim:', gameMethods.includes('_startRollingAnim'));
    }
    
    // Verificar autentica√ß√£o
    if (window.sb && window.sb.auth) {
        console.log('\nüîê 3. VERIFICANDO AUTENTICA√á√ÉO:');
        window.sb.auth.getUser().then(function(response) {
            const user = response.data?.user;
            if (user) {
                console.log('  ‚úÖ Usu√°rio autenticado:', user.email || user.id);
            } else {
                console.log('  ‚ùå Usu√°rio N√ÉO autenticado');
            }
        }).catch(function(error) {
            console.log('  ‚ùå Erro ao verificar autentica√ß√£o:', error);
        });
    }
    
    // Verificar estado do SupabaseMultiplayer
    if (window.SupabaseMultiplayer) {
        console.log('\nüåê 4. ESTADO DO SUPABASE MULTIPLAYER:');
        console.log('  - isConnected:', window.SupabaseMultiplayer.isConnected);
        console.log('  - currentRoomId:', window.SupabaseMultiplayer.currentRoomId);
        console.log('  - currentGameSessionId:', window.SupabaseMultiplayer.currentGameSessionId);
        console.log('  - playerSessionId:', window.SupabaseMultiplayer.playerSessionId);
    }
    
    // Verificar estado do Realtime
    if (window.Realtime) {
        console.log('\nüì° 5. ESTADO DO REALTIME:');
        console.log('  - isUsingSupabase():', window.Realtime.isUsingSupabase());
    }
    
    console.log('\nüîß 6. TESTES MANUAIS DISPON√çVEIS:');
    console.log('  - testRoll(): Simula uma rolagem de dados');
    console.log('  - testSync(): Testa sincroniza√ß√£o diretamente');
    console.log('  - showRealtimeInfo(): Mostra informa√ß√µes da conex√£o real-time');
    
    return {
        hasSupabase: !!window.sb,
        hasMultiplayer: !!window.SupabaseMultiplayer,
        hasRealtime: !!window.Realtime,
        hasGame: !!window.s_oGame,
        isConnected: window.SupabaseMultiplayer?.isConnected || false
    };
}

// Fun√ß√£o para testar rolagem manual
function testRoll() {
    console.log('üé≤ Testando rolagem manual...');
    
    if (!window.s_oGame || !window.s_oGame._generateRandomDices) {
        console.error('‚ùå M√©todo _generateRandomDices n√£o dispon√≠vel');
        return;
    }
    
    const dice = window.s_oGame._generateRandomDices();
    const rollData = {
        d1: dice[0],
        d2: dice[1],
        total: dice[0] + dice[1],
        ts: Date.now(),
        playerName: 'Teste Manual',
        playerId: 'test-player',
        isMyRoll: true
    };
    
    console.log('üéØ Dados gerados:', rollData);
    
    if (window.s_oGame.onSynchronizedRoll) {
        console.log('üìû Chamando onSynchronizedRoll...');
        window.s_oGame.onSynchronizedRoll(rollData);
    } else {
        console.error('‚ùå M√©todo onSynchronizedRoll n√£o dispon√≠vel');
    }
}

// Fun√ß√£o para testar sincroniza√ß√£o
function testSync() {
    console.log('üîÑ Testando sincroniza√ß√£o...');
    
    if (!window.SupabaseMultiplayer || !window.SupabaseMultiplayer.recordSynchronizedRoll) {
        console.error('‚ùå recordSynchronizedRoll n√£o dispon√≠vel');
        return;
    }
    
    if (!window.SupabaseMultiplayer.isConnected) {
        console.error('‚ùå N√£o conectado a uma sala Supabase');
        return;
    }
    
    const die1 = Math.floor(Math.random() * 6) + 1;
    const die2 = Math.floor(Math.random() * 6) + 1;
    
    console.log(`üé≤ Testando sincroniza√ß√£o com dados: ${die1}, ${die2}`);
    
    window.SupabaseMultiplayer.recordSynchronizedRoll(die1, die2)
        .then(function(result) {
            console.log('‚úÖ Sincroniza√ß√£o bem-sucedida:', result);
        })
        .catch(function(error) {
            console.error('‚ùå Erro na sincroniza√ß√£o:', error);
        });
}

// Fun√ß√£o para mostrar informa√ß√µes do real-time
function showRealtimeInfo() {
    console.log('üì° === INFORMA√á√ïES DA CONEX√ÉO REAL-TIME ===');
    
    if (window.SupabaseMultiplayer && window.SupabaseMultiplayer.currentRoomId) {
        console.log('üè† Sala atual:', window.SupabaseMultiplayer.currentRoomId);
        console.log('üéÆ Sess√£o do jogo:', window.SupabaseMultiplayer.currentGameSessionId);
        console.log('üë§ Sess√£o do jogador:', window.SupabaseMultiplayer.playerSessionId);
        
        // Verificar subscription
        if (window.sb) {
            const channels = window.sb.getChannels();
            console.log('üì∫ Canais ativos:', channels.length);
            channels.forEach((channel, index) => {
                console.log(`  Canal ${index + 1}:`, channel.topic, 'Estado:', channel.state);
            });
        }
    } else {
        console.log('‚ùå N√£o h√° informa√ß√µes da sala dispon√≠veis');
    }
}

// Tornar fun√ß√µes globais para uso f√°cil no console
window.debugSyncSetup = debugSyncSetup;
window.testRoll = testRoll;
window.testSync = testSync;
window.showRealtimeInfo = showRealtimeInfo;

console.log('üîß Script de depura√ß√£o carregado! Execute debugSyncSetup() para come√ßar.');